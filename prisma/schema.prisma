// This is your Prisma schema file,// This is your Prisma schema file,// This is your Prisma schema file,// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String         @id @default(uuid())
  name          String?
  email         String         @unique
  emailVerified DateTime?
  image         String?        @default("https://avatars.githubusercontent.com/u/10367109?v=4")
  accounts      Account[]
  sessions      Session[]
  grantId       String?
  grantEmail    String?
  username      String?        @unique
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  Availability  Availability[]
  EventType     EventType[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Availability {
  id String @id @default(uuid())

  day      Day
  fromTime String // e.g., '08:00'
  tillTime String // e.g., '18:00'
  isActive Boolean @default(true) // Toggle availability for the day

  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model EventType {
  id                String  @id @default(uuid())
  title             String
  duration          Int
  url               String
  description       String
  active            Boolean @default(true)
  videoCallSoftware String  @default("Google Meet")

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  createdAt DateTime @default(now())
}
